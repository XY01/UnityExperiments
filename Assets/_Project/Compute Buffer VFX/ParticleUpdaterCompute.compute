// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateParticles

struct Particle
{
    float3 position;
    float size;
    float4 color;
};

// The number of particles
uint ParticleCount;

// // Structure to hold particle data
// struct Particle {
//     float3 position;
// };

// The buffer to hold particle data
RWStructuredBuffer<Particle> ParticleBuffer;

float time;
// Dispatched function
[numthreads(64, 1, 1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID) 
{
    if (id.x >= ParticleCount) return;

    float norm = id.x / (float)ParticleCount;
    norm *= 6.28;
    // Update the particle position
    Particle p = ParticleBuffer[id.x]; 
    p.position.y = sin(norm + time) * 1;
    p.color.x = (sin(norm * 2 + time) + 1) * .5;
    const float sizeNorm = (sin(norm * 4 + time) + 1) * .5;
    p.size = .1 + sizeNorm * .2;
    ParticleBuffer[id.x] = p;
}
