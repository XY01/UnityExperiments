#pragma kernel WhiteNoise
#pragma kernel ValueNoise
#pragma kernel WorleyNoise
#pragma kernel PerlinNoise

#pragma kernel MinMax
#pragma kernel Remap


#include "HLSLExtension.hlsl"


//---- VARIABLES
//
RWTexture2D<float> OutputTex;

float freq = 4;
uint resolution = 512;
uint octaves = 1;

// Scalar on aplitude for each octave
float persistance;
// Scalar on freq for each octave
float lacunarity;

bool additionalLayer = false;
float valueScalar = 1;

float time;
bool tiling;


//---- PRAGMAS
//
[numthreads(8,8,1)]
void WhiteNoise (uint3 id : SV_DispatchThreadID)
{
    OutputTex[id.xy] = noise2x1(id.xy);
}


[numthreads(8,8,1)]
void ValueNoise (uint3 id : SV_DispatchThreadID)
{
    float amplitude = 1;    
    float noiseHeight = 0;
    float cachedFreq = freq;
    
    float2 uv = float2((float)id.x/resolution,
                        (float)id.y/resolution);


    for(uint i = 0; i < octaves; i++)
    {
        float noiseSample = valueNoise(uv, cachedFreq, time, tiling);
        noiseHeight += noiseSample * amplitude;

        cachedFreq *= lacunarity;
        amplitude *= persistance;
    }
    
    OutputTex[id.xy] = noiseHeight;    
}

[numthreads(8,8,1)]
void WorleyNoise (uint3 id : SV_DispatchThreadID)
{
    float amplitude = 1;    
    float noiseHeight = 0;
    float cachedFreq = freq;
    
    float2 uv = float2((float)id.x/resolution,
                        (float)id.y/resolution);

   
    for(uint i = 0; i < octaves; i++)
    {
        float noiseSample = worleyNoise(uv, cachedFreq, time);
        noiseHeight += noiseSample * amplitude;

        cachedFreq *= lacunarity;
        amplitude *= persistance;
    }
    

    OutputTex[id.xy] = noiseHeight;     
}

[numthreads(8,8,1)]
void PerlinNoise (uint3 id : SV_DispatchThreadID)
{
    float amplitude = 1;    
    float noiseHeight = 0;
    float cachedFreq = freq;
    
    float2 uv = float2((float)id.x/resolution,
                        (float)id.y/resolution);

    
    for(uint i = 0; i < octaves; i++)
    {
        float noiseSample = perlinNoise(uv, cachedFreq, time, tiling);
        noiseHeight += noiseSample * amplitude;
        cachedFreq *= lacunarity;
        amplitude *= persistance;
    }

    OutputTex[id.xy] = noiseHeight;
}


RWStructuredBuffer<float> minMaxBuffer;

[numthreads(1,1,1)]
void MinMax (uint3 id : SV_DispatchThreadID) 
{
    minMaxBuffer[0] = min(minMaxBuffer[0], OutputTex[id.xy]);
    minMaxBuffer[1] = max(minMaxBuffer[1], OutputTex[id.xy]);
}

[numthreads(8,8,1)]
void Remap (uint3 id : SV_DispatchThreadID)
{
    float texel = OutputTex[id.xy];
    float newValue = inverseLerp(minMaxBuffer[0],minMaxBuffer[1], texel);
    OutputTex[id.xy] = newValue;
}